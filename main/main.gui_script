-- ◎前提条件
-- ・input_bindingの設定で左クリックをhash('touch')とする
-- ・GUIにマスクを作ってその下にスクロールエリアとスクロールエリアバーを用意する
-- ☆バーの方向はx,yどちらでもよい

-- 最初に実行
function init(self)
    msg.post('.', 'acquire_input_focus')
end
-- ノードが有効か判定
function isenabled(self, node)
    local parent = gui.get_parent(node) --親が無かったらnill。あったら名前を返す
    if parent then
        return isenabled(self, parent) --親の名前を返す
    end
    return gui.is_enabled(node) --ノードが有効ならtrueを返す。無効ならfalseを返す
end
-- 触った（action_id）の名前があるかどうか判定
local function safe_get_node(node)
    --ノードがあるか、あったら名前を返す
    if
        pcall(
            function()
                gui.get_node(node)
            end
        )
     then
        return gui.get_node(node)
    else
        return nil
    end
end
-- 触ったノードが有効か　有効なら触ったノード名を返す
local function hit_test(self, node, action_id, action)
    if not isenabled(self, node) then
        return false
    end
    local hit = gui.pick_node(node, action.x, action.y)
    local touch = action_id == hash('touch')
    return touch and hit
end
-- スクロールエリアを動かす
local function sc(node_str, action_id, action, scroll, cb)
    local node = gui.get_node(node_str) --スクロールエリア
    local parent = gui.get_parent(node) --スクロールエリアの親
    local touch = action_id == hash('touch') --action_idの種類が左クリックの時、記録

    -- local scroll = self.scrollarea
    local scroll = scroll
    -- scrollに何も入ってない時、いろいろ設定する
    if not scroll then
        local p = gui.get_position(node)
        local s = gui.get_size(node)
        scroll = {drag = false, started = false, dx = 0, dy = 0, ox = p.x, oy = p.y, ow = s.x, oh = s.y}
        -- scrollarea_barx か scrollarea_baryのどっちか用意しておくとself.scrollareaに追加される
        scroll.bar_x = safe_get_node(node_str .. '_barx') --触ったノードにbarxくっつけてあったら返す
        scroll.bar_y = safe_get_node(node_str .. '_bary') --触ったノードにbaryくっつけてあったら返す
    end
    -- 触ったノードの名前と親を記録（ある場合）
    local hit = false
    if parent then
        hit = hit_test(self, parent, action_id, action)
    else
        hit = hit_test(self, node, action_id, action)
    end
-- スクロール移動の判定
    local consumed_input = false
    -- スクロール移動計算
    if touch then
        -- クリック離したらスクロールとドラッグの終わり
        if scroll.drag and action.released then
            -- potentially start scroll/drag
            scroll.drag = false
            scroll.started = false
            consumed_input = true
        -- エリア内クリックしたらスクロールの始まり
        elseif hit and action.pressed then
            scroll.started = true
        -- スクロールしていてエリアをちょっとでも動かした時ドラッグの始まり
        elseif scroll.started and hit and (action.dx ~= 0 or action.dy ~= 0) then
            scroll.drag = true
            scroll.started = false
            consumed_input = true
        end
-- ドラッグしている時　スクロールの差分を計算
        if scroll.drag then
            consumed_input = true

            scroll.dx = scroll.dx - action.dx
            scroll.dy = scroll.dy + action.dy
-- マスクがあるときスクロール範囲の最大最小を決める
            if parent then
                local s = gui.get_size(parent)
                local min_x = 0
                local min_y = 0
                local max_x = math.max(0, scroll.ow - s.x)
                local max_y = math.max(0, scroll.oh - s.y)

                if scroll.dx < min_x then
                    scroll.dx = min_x
                end
                if scroll.dx > max_x then
                    scroll.dx = max_x
                end
                if scroll.dy < min_y then
                    scroll.dy = min_y
                end
                if scroll.dy > max_y then
                    scroll.dy = max_y
                end
-- スクロールバーの位置反映、バーの位置がｘは左下、ｙは右上になるようにしてある
                if scroll.bar_x and max_x > 0 then
                    local delta_x = scroll.dx / max_x
                    local bar_s = gui.get_size(scroll.bar_x)
                    local p = vmath.vector3((s.x - bar_s.x) * delta_x, -s.y, 0)
                    gui.set_position(scroll.bar_x, p)
                end
                if scroll.bar_y and max_y > 0 then
                    local delta_y = scroll.dy / max_y
                    local bar_s = gui.get_size(scroll.bar_y)
                    local p = vmath.vector3(s.x, -(s.y - bar_s.y) * delta_y, 0)
                    gui.set_position(scroll.bar_y, p)
                end
            end
-- スクロールの位置反映
            gui.set_position(node, vmath.vector3(scroll.ox - scroll.dx, scroll.oy + scroll.dy, 0))
        end
    end
--スクロールエリア内を触っていて、まだスクロール移動していない時
    if not consumed_input and ((touch and hit) or not touch) then
        cb(self, action_id, action)
    end

    return scroll
end
function on_input(self, action_id, action)
    self.scrollarea =
        sc(
        'scrollarea',
        action_id,
        action,
        self.scrollarea,
        function(self, action_id, action)
            -- ボタンの範囲内でクリックした時
            if action.pressed and gui.pick_node(gui.get_node('box'), action.x, action.y) then
                print('push_button')
            end
        end
    )
end
